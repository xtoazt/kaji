import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useApi } from '../contexts/ApiContext';

interface Exploit {
  id: string;
  title: string;
  description: string;
  severity: string;
  chromeos_version: string;
  created_at: string;
  verified: boolean;
}

export const Exploits: React.FC = () => {
  const { get } = useApi();
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchExploits = async () => {
      try {
        const data = await get('/exploits');
        setExploits(data.exploits || []);
      } catch (error) {
        setError('Failed to load exploits');
        console.error('Error fetching exploits:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchExploits();
  }, [get]);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-900">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-400">Loading exploits...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-white mb-2">Exploits Database</h1>
              <p className="text-gray-400">ChromeOS vulnerabilities and exploits</p>
            </div>
            <Link
              to="/"
              className="text-blue-400 hover:text-blue-300 font-medium"
            >
              ← Back to home
            </Link>
          </div>
        </div>

        {error && (
          <div className="bg-red-900 border border-red-700 text-red-200 px-4 py-3 rounded-lg mb-6">
            {error}
          </div>
        )}

        {exploits.length === 0 ? (
          <div className="bg-gray-800 rounded-lg border border-gray-700 p-8 text-center">
            <div className="w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-white mb-2">No exploits found</h3>
            <p className="text-gray-400 mb-4">
              The database is currently empty. Check back later for ChromeOS vulnerabilities.
            </p>
            <Link
              to="/chat"
              className="inline-block bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Ask AI about exploits
            </Link>
          </div>
        ) : (
          <div className="space-y-4">
            {exploits.map((exploit) => (
              <div key={exploit.id} className="bg-gray-800 rounded-lg border border-gray-700 p-6 hover:border-gray-600 transition-colors">
                <div className="flex items-start justify-between mb-3">
                  <h3 className="text-lg font-semibold text-white">{exploit.title}</h3>
                  <div className="flex items-center space-x-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(exploit.severity)}`}>
                      {exploit.severity}
                    </span>
                    {exploit.verified && (
                      <span className="px-2 py-1 bg-green-900 text-green-200 rounded-full text-xs font-medium">
                        ✓ Verified
                      </span>
                    )}
                  </div>
                </div>
                
                <p className="text-gray-400 mb-3">{exploit.description}</p>
                
                <div className="flex items-center justify-between text-sm text-gray-500">
                  <span>ChromeOS {exploit.chromeos_version}</span>
                  <span>{new Date(exploit.created_at).toLocaleDateString()}</span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};
